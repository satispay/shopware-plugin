(function(){"use strict";var t={};t.p="bundles/satispay/",window?.__sw__?.assetPath&&(t.p=window.__sw__.assetPath+"/bundles/satispay/"),function(){let t=Shopware.Classes.ApiService;var e=class extends t{constructor(t,e,a="satispay"){super(t,e,a)}activate(){let e=`_action/${this.getApiBasePath()}/activate`;return this.httpClient.get(e,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}};let a=Shopware.Classes.ApiService;var n=class extends a{constructor(t,e,a="satispay"){super(t,e,a)}getPaymentDetails(t,e){let n=`_action/${this.getApiBasePath()}/payment-details/${t}/${e}`;return this.httpClient.get(n,{headers:this.getBasicHeaders()}).then(t=>a.handleResponse(t))}refundPayment(t,e,n){let i=`_action/${this.getApiBasePath()}/refund-payment/${t}/${e}`;return this.httpClient.post(i,{refundAmount:n},{headers:this.getBasicHeaders()}).then(t=>a.handleResponse(t))}};Shopware.Application.addServiceProvider("SatispayConfigApiService",t=>new e(Shopware.Application.getContainer("init").httpClient,t.loginService)),Shopware.Application.addServiceProvider("SatispayPaymentService",t=>new n(Shopware.Application.getContainer("init").httpClient,t.loginService));let{Component:i,Mixin:s}=Shopware;i.override("sw-plugin-config",{template:'{% block sw_plugin_config_actions_save %}\n     {%  parent %}\n     {% block satispay_plugin_config_actions_activate %}\n     {% endblock %}\n{% endblock %}\n{% block sw_plugin_config_content %}\n {%  parent %}\n    <sw-loader v-if="isLoading"></sw-loader>\n{% endblock %}\n\n',inject:["SatispayConfigApiService"],mixins:[s.getByName("notification")],data(){return{isLoading:!1}},methods:{handleErrorOnApi(t){try{let e=void 0!==t.response.data.error?t.response.data.error:this.$tc("satispay-config.notification.error");this.createNotificationError({title:this.$tc("global.default.error"),message:e,autoClose:!1})}finally{this.isLoading=!1}},handleApiResponse(){try{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("satispay-config.notification.success")})}finally{this.isLoading=!1,window.location.reload()}},onActivateClickedButton(){this.isLoading=!0,this.SatispayConfigApiService.activate().then(this.handleApiResponse).catch(this.handleErrorOnApi)}}});let{Component:r,Mixin:o,Context:l}=Shopware,p=Shopware.Data.Criteria;r.register("satispay-payment-detail",{template:'{% block satispay_payment_detail %}\n    <div class="satispay-payment-detail">\n        <div v-if="!isLoading && showPaymentDetails">\n            <sw-card :title="$tc(\'satispay-payments.paymentDetails.title\')">\n                <template #grid>\n\n                    {% block satispay_payment_actions_section %}\n                        <sw-card-section secondary slim>\n                            <satispay-payment-actions :order="order" :paymentResource="paymentTransactionData">\n                            </satispay-payment-actions>\n                        </sw-card-section>\n                    {% endblock %}\n\n                    <sw-card-section divider="top">\n                        <sw-container columns="1fr"\n                                      gap="0px 30px">\n                            <h3>\n                                  {{ $tc(\'satispay-payments.paymentDetails.status.heading\') }}\n                            </h3>\n\n                            {% block satispay_payment_detail %}\n                                <sw-description-list>\n                                    <dt>{{ $tc(\'satispay-payments.paymentDetails.description.status\') }}</dt>\n                                    <dd>{{ status }}</dd>\n                                    <dt>{{ $tc(\'satispay-payments.paymentDetails.description.amount\') }}</dt>\n                                    <dd>{{ amount }}</dd>\n                                    <dt>{{ $tc(\'satispay-payments.paymentDetails.description.currency\') }}</dt>\n                                    <dd>{{ currency }}</dd>\n                                    <dt>{{ $tc(\'satispay-payments.paymentDetails.description.flow\') }}</dt>\n                                    <dd>{{ flow }}</dd>\n                                    <dt>{{ $tc(\'satispay-payments.paymentDetails.description.type\') }}</dt>\n                                    <dd>{{ type }}</dd>\n                                </sw-description-list>\n                            {% endblock %}\n                        </sw-container>\n                    </sw-card-section>\n                </template>\n            </sw-card>\n\n        </div>\n\n        <div v-if="showError">\n            <sw-empty-state\n                :title="$tc(\'satispay-payments.paymentDetails.errorPage.title\')"\n                :subline="$tc(\'satispay-payments.paymentDetails.errorPage.subline\')"\n                icon="default-shopping-paper-bag"\n                color="#A092F0">\n            </sw-empty-state>\n        </div>\n\n        <sw-loader v-if="isLoading"></sw-loader>\n    </div>\n{% endblock %}\n',inject:["SatispayPaymentService","repositoryFactory"],mixins:[o.getByName("notification")],data(){return{isLoading:!0,showPaymentDetails:!1,order:null,satispayTransactionId:null,paymentTransactionData:null,currency:null,status:null,flow:null,type:null}},computed:{showError(){return!1===this.isLoading&&!1===this.showPaymentDetails},amount(){return this.paymentTransactionData?this.paymentTransactionData.amount_unit/100:0}},created(){this.createdComponent()},methods:{handleErrorOnApi(t){try{this.createNotificationError({title:this.$tc("satispay-payments.paymentDetails.errorPage.title"),message:t.response.data.errors[0].detail,autoClose:!1})}finally{this.isLoading=!1,this.showPaymentDetails=!1}},createdComponent(){let t=this.$route.params.id,e=this.repositoryFactory.create("order"),a=new p(1,1);a.getAssociation("transactions").addSorting(p.sort("createdAt")),e.get(t,l.api,a).then(t=>{this.order=t;let e=t.transactions.length-1;if(null===t.transactions[e].customFields||void 0===t.transactions[e].customFields.satispay_payment_id){this.isLoading=!1,this.showPaymentDetails=!1;return}let a=t.transactions[e].customFields.satispay_payment_id;this.showPaymentDetails=!0,this.SatispayPaymentService.getPaymentDetails(this.order.id,a).then(t=>{this.paymentTransactionData=t,this.status=this.paymentTransactionData.status,this.currency=this.paymentTransactionData.currency,this.flow=this.paymentTransactionData.flow,this.type=this.paymentTransactionData.type,this.isLoading=!1}).catch(this.handleErrorOnApi)}).catch(this.handleErrorOnApi)}}});let{Component:c,Mixin:d}=Shopware;c.register("satispay-payment-action-refund",{template:'{% block satispay_payment_actions_modal_refund %}\n\n    <sw-modal\n        variant="small"\n        :title="$tc(`satispay-payments.paymentDetails.modal.refund.title`)"\n        @modal-close="$emit(\'modal-close\')">\n        <sw-number-field\n            v-model:value="refundAmount"\n            :max="refundableAmount"\n            :min="0"\n            :label="$tc(\'satispay-payments.paymentDetails.modal.refund.amount.label\')"\n            :helpText="$tc(\'satispay-payments.paymentDetails.modal.refund.amount.helpText\')">\n            <template #suffix>\n                {{ paymentResource.currency }}\n            </template>\n        </sw-number-field>\n        <span style="font-size: 10px;">\n            {{ $tc(\'satispay-payments.paymentDetails.modal.refund.amount.helpTextEmpty\') }}\n            <br />\n            {{ $tc(\'satispay-payments.paymentDetails.modal.refund.amount.helpTextDecimals\') }}\n        </span>\n        <template #modal-footer>\n            <sw-button variant="primary"\n                       @click="refund">\n                {{ $tc(\'satispay-payments.paymentDetails.modal.refund.confirmButton\') }}\n            </sw-button>\n        </template>\n\n    </sw-modal>\n{% endblock %}\n\n',inject:["SatispayPaymentService"],mixins:[d.getByName("notification")],props:{paymentResource:{type:Object,required:!0},order:{type:Object,required:!0}},data(){return{refundableAmount:0,refundAmount:0,isLoading:!1}},created(){this.paymentResource&&(this.refundableAmount=this.paymentResource.amount_unit/100)},methods:{handleErrorOnApi(t){try{let e=void 0!==t.response.data.error?t.response.data.error:this.$tc("satispay-payments.paymentDetails.modal.notification.error");this.createNotificationError({title:this.$tc("satispay-payments.paymentDetails.errorPage.title"),message:e,autoClose:!1})}finally{this.isLoading=!1,this.showPaymentDetails=!1,this.$emit("modal-close")}},handleApiResponse(){try{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("satispay-payments.paymentDetails.modal.notification.success")})}finally{this.isLoading=!1,this.showPaymentDetails=!0,this.$emit("modal-close")}},refund(){this.isLoading=!0;let t=this.order.transactions.length-1,e=this.order.transactions[t].customFields.satispay_payment_id,a=0===this.refundAmount?this.refundableAmount:this.refundAmount;this.SatispayPaymentService.refundPayment(this.order.id,e,a).then(this.handleApiResponse).catch(this.handleErrorOnApi)}}});let{Component:m}=Shopware,{mapState:u}=m.getComponentHelper();m.register("satispay-payment-actions",{template:'{% block satispay_payment_actions %}\n<div>\n    <div class="satispay-payment-actions__button-container">\n        <div class="satispay-payment-actions__authorize-button-group">\n\n            {% block satispay_payment_actions_refund %}\n                <sw-button variant="primary"\n                           size="small"\n                           :disabled="notRefundable"\n                           @click="showModal = true">\n                    {{ $tc(\'satispay-payments.paymentDetails.buttons.label.refund\') }}\n                </sw-button>\n            {% endblock %}\n\n        </div>\n\n        {% block satispay_payment_actions_modal %}\n\n            {% block satispay_payment_actions_modal_refund %}\n                <satispay-payment-action-refund\n                    v-if="showModal"\n                    @modal-close="showModal=false"\n                    :order="order" :paymentResource="paymentResource">\n                </satispay-payment-action-refund>\n            {% endblock %}\n\n        {% endblock %}\n    </div>\n</div>\n{% endblock %}\n\n',inject:["repositoryFactory"],data(){return{showModal:!1}},props:{paymentResource:{type:Object,required:!0}},computed:{...u("swOrderDetail",["order"]),orderTransaction(){let t=this.order.transactions.length-1;return this.order.transactions[t]},isStateRefundable(){return["paid","paid_partially","refunded"].indexOf(this.orderTransaction.stateMachineState.technicalName)>-1},notRefundable(){let t=this.isStateRefundable;return this.paymentResource.amount_unit<=0||"ACCEPTED"!=this.paymentResource.status||!t}},watch:{order:{immediate:!0}}});var y=JSON.parse('{"satispay-payments":{"general":{"mainMenuItemGeneral":"Satispay","descriptionTextModule":"Save time and money by accepting payments from your customers with Satispay. Free, simple, secure! #doitsmart"},"paymentDetails":{"title":"Payment details","buttons":{"label":{"refund":"Make a refund"}},"status":{"heading":"Payment"},"errorPage":{"title":"Error","subline":"An error occurred while retrieving the payment details."},"description":{"status":"Status","amount":"Amount","currency":"Currency","type":"Type","flow":"Flow"},"modal":{"refund":{"title":"Refund","amount":{"label":"Amount","helpText":"Amount to refund for the current order.","helpTextEmpty":"Leave empty to refund the total amount.","helpTextDecimals":"Decimals must be divided with a dot."},"confirmButton":"Perform refund"},"notification":{"success":"Refund approved","error":"An error occurred. Please retry or contact your support."}}}},"satispay-config":{"activateButton":"Activate","notification":{"success":"Activation processed","error":"An error occurred. Please retry or contact your support."}}}'),h=JSON.parse('{"satispay-payments":{"general":{"mainMenuItemGeneral":"Satispay","descriptionTextModule":"Spare Zeit und Geld, indem du Zahlungen von deinen Kunden mit Satispay akzeptierst. Kostenlos, einfach, sicher! #doitsmart"},"paymentDetails":{"title":"Zahlungsdetails","buttons":{"label":{"refund":"Eine R\xfcckerstattung machen"}},"status":{"heading":"Zahlung"},"errorPage":{"title":"Fehler","subline":"Beim Abrufen der Zahlungsdetails ist ein Fehler aufgetreten."},"description":{"status":"Status","amount":"Betrag","currency":"W\xe4hrung","type":"Art","flow":"Fluss"},"modal":{"refund":{"title":"R\xfcckerstattung","amount":{"label":"Betrag","helpText":"Zu erstattender Betrag f\xfcr die aktuelle Bestellung.","helpTextEmpty":"Leer lassen, um den Gesamtbetrag zu erstatten.","helpTextDecimals":"Die Dezimalstellen m\xfcssen mit dem Punkt dividiert werden."},"confirmButton":"Eine R\xfcckerstattung machen"},"notification":{"success":"R\xfcckerstattung ausgef\xfchrt","error":"Es ist ein Fehler aufgetreten. Bitte versuche es erneut oder kontaktiere deinen Support."}}}},"satispay-config":{"activateButton":"Aktivieren","notification":{"success":"Aktivierung abgeschlossen","error":"Es ist ein Fehler aufgetreten. Bitte versuche es erneut oder kontaktiere deinen Support."}}}'),f=JSON.parse('{"satispay-payments":{"general":{"mainMenuItemGeneral":"Satispay","descriptionTextModule":"Risparmia tempo e denaro ricevendo pagamenti dai tuoi clienti con Satispay. Gratuita, semplice, sicura. #doitsmart"},"paymentDetails":{"title":"Dettagli pagamento","buttons":{"label":{"refund":"Effettua un rimborso"}},"status":{"heading":"Pagamento"},"errorPage":{"title":"Errore","subline":"Si \xe8 verificato un errore durante il recupero dei dettagli di pagamento."},"description":{"status":"Stato","amount":"Importo","currency":"Valuta","type":"Tipologia","flow":"Flusso"},"modal":{"refund":{"title":"Rimborso","amount":{"label":"Importo","helpText":"Importo da rimborsare per l\'ordine corrente.","helpTextEmpty":"Lasciare vuoto per rimborsare l\'intero importo.","helpTextDecimals":"I decimali vanno divisi con il punto."},"confirmButton":"Effettua rimborso"},"notification":{"success":"Rimborso eseguito","error":"Si \xe8 verificato un errore. Riprova o contatta il supporto."}}}},"satispay-config":{"activateButton":"Attiva","notification":{"success":"Attivazione effettuata","error":"Si \xe8 verificato un errore. Riprova o contatta il supporto."}}}');let{Module:g}=Shopware;g.register("satispay-payment",{type:"plugin",name:"SatispayPayments",title:"satispay-payments.general.mainMenuItemGeneral",description:"satispay-payments.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#333",icon:"default-action-settings",snippets:{"en-GB":y,"de-DE":h,"it-IT":f},routeMiddleware(t,e){"sw.order.detail"===e.name&&e.children.push({component:"satispay-payment-detail",name:"satispay.payment.detail",isChildren:!0,path:"/sw/order/satispay/detail/:id",meta:{parentPath:"sw.order.index"}}),t(e)}});let{Component:w,Mixin:v}=Shopware;w.register("satispay-config-check-button",{template:'<template>\n    <sw-button class="sw-plugin-config__activate-action"\n            @click="onActivateClickedButton"\n    >{{ $tc(\'satispay-config.activateButton\') }}</sw-button>\n</template>\n\n',inject:["SatispayConfigApiService"],mixins:[v.getByName("notification")],data(){return{isLoading:!1}},methods:{handleErrorOnApi(t){try{let e=void 0!==t.response.data.error?t.response.data.error:this.$tc("satispay-config.notification.error");this.createNotificationError({title:this.$tc("global.default.error"),message:e,autoClose:!1})}finally{this.isLoading=!1}},handleApiResponse(){try{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("satispay-config.notification.success")})}finally{this.isLoading=!1,window.location.reload()}},onActivateClickedButton(){this.isLoading=!0,this.SatispayConfigApiService.activate().then(this.handleApiResponse).catch(this.handleErrorOnApi)}}});let{Component:b,Context:S}=Shopware,_=Shopware.Data.Criteria;b.override("sw-order-detail",{template:"{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    <sw-tabs-item\n        v-if=\"isSatispayPayment\"\n        :route=\"{ name: 'satispay.payment.detail', params: { id: $route.params.id } }\"\n        :title=\"$tc('satispay-payments.order-detail.tabTitle')\">\n        {{ $tc('satispay-payments.order-detail.tabTitle') }}\n    </sw-tabs-item>\n{% endblock %}\n",inject:["repositoryFactory"],data(){return{isSatispayPayment:!1}},created(){this.initializeSatispay()},methods:{initializeSatispay(){let t=this.orderId,e=this.repositoryFactory.create("order"),a=new _(1,1);a.getAssociation("transactions").addSorting(_.sort("createdAt")),e.get(t,S.api,a).then(t=>{let e=t.transactions.length-1;if(null===t.transactions[e].customFields||void 0===t.transactions[e].customFields.satispay_payment_id){this.isSatispayPayment=!1;return}this.isSatispayPayment=!0})}}})}()})();
//# sourceMappingURL=satispay.js.map