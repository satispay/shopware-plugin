{"version":3,"file":"satispay-6tHuB-xN.js","sources":["../../../app/administration/src/module/api/satispay-config.api.service.js","../../../app/administration/src/module/api/satispay-payment-api.service.js","../../../app/administration/src/module/init/config-init.js","../../../app/administration/src/module/satispay-payments/config/sw-plugin-config.html.twig","../../../app/administration/src/module/satispay-payments/config/index.js","../../../app/administration/src/module/satispay-payments/page/satispay-payment-detail/satispay-payment-detail.html.twig","../../../app/administration/src/module/satispay-payments/component/satispay-payment-action/satispay-payment-actions.html.twig","../../../app/administration/src/module/satispay-payments/component/satispay-payment-action/extension/satispay-payment-action-refund/satispay-payment-action-refund.html.twig","../../../app/administration/src/module/satispay-payments/component/satispay-payment-action/extension/satispay-payment-action-refund/index.js","../../../app/administration/src/module/satispay-payments/component/satispay-payment-action/index.js","../../../app/administration/src/module/satispay-payments/page/satispay-payment-detail/index.js","../../../app/administration/src/module/satispay-payments/index.js","../../../../../../../shopware/administration/Resources/app/administration/node_modules/.shopware-vite-plugin-vue-globals/vue.js","../../../app/administration/src/module/component/satispay-config-check-button/satispay-config-check-button.vue","../../../app/administration/src/module/component/satispay-config-check-button/index.js","../../../app/administration/src/module/sw-order/sw-order-detail.html.twig","../../../app/administration/src/module/sw-order/index.js"],"sourcesContent":["const ApiService = Shopware.Classes.ApiService;\n\n// noinspection JSUnresolvedFunction\nclass SatispayConfigApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'satispay') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    activate() {\n        const apiRoute = `_action/${this.getApiBasePath()}/activate`;\n        return this.httpClient\n            .get(apiRoute,\n                {\n                    headers: this.getBasicHeaders()\n                })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nexport default SatispayConfigApiService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SatispayPaymentService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'satispay') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    getPaymentDetails(orderId, paymentId) {\n        const apiRoute = `_action/${this.getApiBasePath()}/payment-details/${orderId}/${paymentId}`;\n        return this.httpClient.get(\n            apiRoute,\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    refundPayment(orderId, paymentId, refundAmount) {\n        const apiRoute = `_action/${this.getApiBasePath()}/refund-payment/${orderId}/${paymentId}`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                refundAmount: refundAmount\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default SatispayPaymentService;\n","import SatispayConfigApiService\n    from '../api/satispay-config.api.service';\n\nimport SatispayPaymentService from '../api/satispay-payment-api.service';\n// noinspection JSUnresolvedFunction\nShopware.Application.addServiceProvider('SatispayConfigApiService', container => {\n    const initContainer = Shopware.Application.getContainer('init');\n    return new SatispayConfigApiService(initContainer.httpClient, container.loginService);\n});\n// noinspection JSUnresolvedFunction\nShopware.Application.addServiceProvider('SatispayPaymentService', container => {\n    const initContainer = Shopware.Application.getContainer('init');\n    return new SatispayPaymentService(initContainer.httpClient, container.loginService);\n});\n","{% block sw_plugin_config_actions_save %}\n     {%  parent %}\n     {% block satispay_plugin_config_actions_activate %}\n     {% endblock %}\n{% endblock %}\n{% block sw_plugin_config_content %}\n {%  parent %}\n    <sw-loader v-if=\"isLoading\"></sw-loader>\n{% endblock %}\n\n","import template from './sw-plugin-config.html.twig';\nimport SatispayConfigApiService from '../../api/satispay-config.api.service';\n\nconst { Component, Mixin } = Shopware;\n\n\nComponent.override('sw-plugin-config', {\n    template,\n    inject: ['SatispayConfigApiService'],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    data() {\n        return {\n            isLoading: false\n        };\n    },\n\n    methods: {\n        handleErrorOnApi(errorResponse) {\n            try {\n                const message = errorResponse.response.data.error !== undefined ? errorResponse.response.data.error : this.$tc('satispay-config.notification.error');\n                this.createNotificationError({\n                    title: this.$tc('global.default.error'),\n                    message: message,\n                    autoClose: false\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n        handleApiResponse() {\n            try {\n                this.createNotificationSuccess({\n                    title: this.$tc('global.default.success'),\n                    message: this.$tc('satispay-config.notification.success')\n                });\n            } finally {\n                this.isLoading = false;\n                window.location.reload();\n            }\n        },\n        onActivateClickedButton() {\n            this.isLoading = true;\n            this.SatispayConfigApiService.activate()\n                .then(this.handleApiResponse)\n                .catch(this.handleErrorOnApi);\n        }\n    }\n});\n","{% block satispay_payment_detail %}\n    <div class=\"satispay-payment-detail\">\n        <div v-if=\"!isLoading && showPaymentDetails\">\n            <sw-card :title=\"$tc('satispay-payments.paymentDetails.title')\">\n                <template #grid>\n\n                    {% block satispay_payment_actions_section %}\n                        <sw-card-section secondary slim>\n                            <satispay-payment-actions :order=\"order\" :paymentResource=\"paymentTransactionData\">\n                            </satispay-payment-actions>\n                        </sw-card-section>\n                    {% endblock %}\n\n                    <sw-card-section divider=\"top\">\n                        <sw-container columns=\"1fr\"\n                                      gap=\"0px 30px\">\n                            <h3>\n                                  {{ $tc('satispay-payments.paymentDetails.status.heading') }}\n                            </h3>\n\n                            {% block satispay_payment_detail %}\n                                <sw-description-list>\n                                    <dt>{{ $tc('satispay-payments.paymentDetails.description.status') }}</dt>\n                                    <dd>{{ status }}</dd>\n                                    <dt>{{ $tc('satispay-payments.paymentDetails.description.amount') }}</dt>\n                                    <dd>{{ amount }}</dd>\n                                    <dt>{{ $tc('satispay-payments.paymentDetails.description.currency') }}</dt>\n                                    <dd>{{ currency }}</dd>\n                                    <dt>{{ $tc('satispay-payments.paymentDetails.description.flow') }}</dt>\n                                    <dd>{{ flow }}</dd>\n                                    <dt>{{ $tc('satispay-payments.paymentDetails.description.type') }}</dt>\n                                    <dd>{{ type }}</dd>\n                                </sw-description-list>\n                            {% endblock %}\n                        </sw-container>\n                    </sw-card-section>\n                </template>\n            </sw-card>\n\n        </div>\n\n        <div v-if=\"showError\">\n            <sw-empty-state\n                :title=\"$tc('satispay-payments.paymentDetails.errorPage.title')\"\n                :subline=\"$tc('satispay-payments.paymentDetails.errorPage.subline')\"\n                icon=\"default-shopping-paper-bag\"\n                color=\"#A092F0\">\n            </sw-empty-state>\n        </div>\n\n        <sw-loader v-if=\"isLoading\"></sw-loader>\n    </div>\n{% endblock %}\n","{% block satispay_payment_actions %}\n<div>\n    <div class=\"satispay-payment-actions__button-container\">\n        <div class=\"satispay-payment-actions__authorize-button-group\">\n            {% block satispay_payment_actions_refund %}\n                <sw-button variant=\"primary\"\n                           size=\"small\"\n                           :disabled=\"notRefundable\"\n                           @click=\"showModal = true\">\n                    {{ $tc('satispay-payments.paymentDetails.buttons.label.refund') }}\n                </sw-button>\n            {% endblock %}\n\n        </div>\n\n        {% block satispay_payment_actions_modal %}\n\n            {% block satispay_payment_actions_modal_refund %}\n                <satispay-payment-action-refund\n                    v-if=\"showModal\"\n                    @modal-close=\"showModal=false\"\n                    :order=\"order\" :paymentResource=\"paymentResource\">\n                </satispay-payment-action-refund>\n            {% endblock %}\n\n        {% endblock %}\n    </div>\n</div>\n{% endblock %}\n","{% block satispay_payment_actions_modal_refund %}\n\n    <sw-modal\n        variant=\"small\"\n        :title=\"$tc(`satispay-payments.paymentDetails.modal.refund.title`)\"\n        @modal-close=\"$emit('modal-close')\">\n        <sw-number-field\n            v-model:value=\"refundAmount\"\n            :max=\"refundableAmount\"\n            :min=\"0\"\n            :label=\"$tc('satispay-payments.paymentDetails.modal.refund.amount.label')\"\n            :helpText=\"$tc('satispay-payments.paymentDetails.modal.refund.amount.helpText')\">\n            <template #suffix>\n                {{ paymentResource.currency }}\n            </template>\n        </sw-number-field>\n        <span style=\"font-size: 10px;\">\n            {{ $tc('satispay-payments.paymentDetails.modal.refund.amount.helpTextEmpty') }}\n            <br />\n            {{ $tc('satispay-payments.paymentDetails.modal.refund.amount.helpTextDecimals') }}\n        </span>\n        <template #modal-footer>\n            <mt-button variant=\"primary\"\n                       @click=\"refund\">\n                {{ $tc('satispay-payments.paymentDetails.modal.refund.confirmButton') }}\n            </mt-button>\n        </template>\n\n    </sw-modal>\n{% endblock %}\n","import template from './satispay-payment-action-refund.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('satispay-payment-action-refund', {\n    template,\n    inject: [\n        'SatispayPaymentService'\n    ],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true\n        },\n        order: {\n            type: Object,\n            required: true\n        }\n\n    },\n    data() {\n        return {\n            refundableAmount: 0,\n            refundAmount: 0,\n            isLoading: false\n        };\n    },\n    created() {\n        if (this.paymentResource) {\n            this.refundableAmount = this.paymentResource.amount_unit / 100;\n        }\n    },\n    methods: {\n\n        handleErrorOnApi(errorResponse) {\n            try {\n                const message = errorResponse.response.data.error !== undefined ?\n                    errorResponse.response.data.error\n                    : this.$tc('satispay-payments.paymentDetails.modal.notification.error');\n                this.createNotificationError({\n                    title: this.$tc('satispay-payments.paymentDetails.errorPage.title'),\n                    message: message,\n                    autoClose: false\n                });\n            } finally {\n                this.isLoading = false;\n                this.showPaymentDetails = false;\n                this.$emit('modal-close');\n            }\n        },\n        handleApiResponse() {\n            try {\n                this.createNotificationSuccess({\n                    title: this.$tc('global.default.success'),\n                    message: this.$tc('satispay-payments.paymentDetails.modal.notification.success')\n                });\n            } finally {\n                this.isLoading = false;\n                this.showPaymentDetails = true;\n                this.$emit('modal-close');\n            }\n        },\n        refund() {\n            this.isLoading = true;\n            const lastTransactionIndex = this.order.transactions.length - 1;\n            const satispayTransactionId = this.order.transactions[lastTransactionIndex].customFields.satispay_payment_id;\n            const refundAmount = this.refundAmount === 0 ? this.refundableAmount : this.refundAmount;\n            // noinspection JSUnresolvedFunction\n            this.SatispayPaymentService.refundPayment(this.order.id, satispayTransactionId, refundAmount)\n                .then(this.handleApiResponse)\n                .catch(this.handleErrorOnApi);\n        }\n    }\n});\n","import template from './satispay-payment-actions.html.twig';\nimport './extension/satispay-payment-action-refund';\n\nconst { Component } = Shopware;\n\nComponent.register('satispay-payment-actions', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n    ],\n\n    data() {\n        return {\n            showModal: false\n        };\n    },\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    computed: {\n        order() {\n            return Shopware.Store.get('swOrderDetail').order;\n        },\n\n        orderTransaction() {\n            const lastTransactionIndex = this.order.transactions.length - 1;\n            return this.order.transactions[lastTransactionIndex];\n        },\n\n        isStateRefundable() {\n            const refundableStates = ['paid', 'paid_partially', 'refunded'];\n            return refundableStates.indexOf(this.orderTransaction.stateMachineState.technicalName) > -1;\n        },\n\n        notRefundable() {\n            const canRefund = this.isStateRefundable;\n            return (this.paymentResource.amount_unit <= 0 || this.paymentResource.status != 'ACCEPTED' || !canRefund);\n        }\n    },\n\n    watch: {\n        order: {\n            immediate: true,\n        },\n    },\n});\n","import template from './satispay-payment-detail.html.twig';\nimport '../../component/satispay-payment-action';\n\nconst { Component, Mixin, Context } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('satispay-payment-detail', {\n    template,\n\n    inject: [\n        'SatispayPaymentService',\n        'repositoryFactory'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n\n    data() {\n        return {\n            isLoading: true,\n            showPaymentDetails: false,\n            order: null,\n            satispayTransactionId: null,\n            paymentTransactionData: null,\n            currency: null,\n            status: null,\n            flow: null,\n            type: null\n        };\n    },\n    computed: {\n        showError() {\n            return this.isLoading === false && this.showPaymentDetails === false;\n        },\n        amount() {\n            if (!this.paymentTransactionData) {\n                return 0;\n            }\n            return this.paymentTransactionData.amount_unit / 100;\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        handleErrorOnApi(errorResponse) {\n            try {\n                this.createNotificationError({\n                    title: this.$tc('satispay-payments.paymentDetails.errorPage.title'),\n                    message: errorResponse.response.data.errors[0].detail,\n                    autoClose: false\n                });\n            } finally {\n                this.isLoading = false;\n                this.showPaymentDetails = false;\n            }\n        },\n        createdComponent() {\n            const orderId = this.$route.params.id;\n            const orderRepository = this.repositoryFactory.create('order');\n            const orderCriteria = new Criteria(1, 1);\n            orderCriteria.getAssociation('transactions').addSorting(Criteria.sort('createdAt'));\n            orderRepository.get(orderId, Context.api, orderCriteria).then((order) => {\n                this.order = order;\n\n                const lastTransactionIndex = order.transactions.length - 1;\n\n                if (order.transactions[lastTransactionIndex].customFields === null ||\n                    typeof order.transactions[lastTransactionIndex].customFields.satispay_payment_id === 'undefined') {\n                    this.isLoading = false;\n                    this.showPaymentDetails = false;\n\n                    return;\n                }\n\n                const satispayTransactionId = order.transactions[lastTransactionIndex].customFields.satispay_payment_id;\n                this.showPaymentDetails = true;\n\n\n                this.SatispayPaymentService.getPaymentDetails(this.order.id, satispayTransactionId).then((payment) => {\n                    this.paymentTransactionData = payment;\n                    this.status = this.paymentTransactionData.status;\n                    this.currency = this.paymentTransactionData.currency;\n                    this.flow = this.paymentTransactionData.flow;\n                    this.type = this.paymentTransactionData.type;\n                    this.isLoading = false;\n                }).catch(this.handleErrorOnApi);\n            }).catch(this.handleErrorOnApi);\n        }\n    }\n});\n","\nimport './config';\nimport './page/satispay-payment-detail';\nimport './component/satispay-payment-action';\n\n\nimport enGB from './snippet/en-GB.json';\nimport deDE from './snippet/de-DE.json';\nimport itIT from './snippet/it-IT.json';\n\nconst { Module } = Shopware;\n\nModule.register('satispay-payment', {\n    type: 'plugin',\n    name: 'SatispayPayments',\n    title: 'satispay-payments.general.mainMenuItemGeneral',\n    description: 'satispay-payments.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#333',\n    icon: 'default-action-settings',\n\n    snippets: {\n        'en-GB': enGB,\n        'de-DE': deDE,\n        'it-IT': itIT\n    },\n\n    routeMiddleware(next, currentRoute) {\n        if (currentRoute.name === 'sw.order.detail') {\n            currentRoute.children.push({\n                component: 'satispay-payment-detail',\n                name: 'satispay.payment.detail',\n                isChildren: true,\n                path: '/sw/order/satispay/detail/:id',\n                meta: {\n                    parentPath: 'sw.order.index'\n                }\n            });\n        }\n        next(currentRoute);\n    }\n});\n","module.exports = window['Shopware']?.['Vue']","<template>\n  <mt-button class=\"sw-plugin-config__activate-action\"\n             @click=\"onActivateClickedButton\" @disabled=\"isLoading\"\n  >{{ $tc('satispay-config.activateButton') }}\n  </mt-button>\n</template>\n\n<script>\nexport default {\n  inject: ['SatispayConfigApiService'],\n  data() {\n    return {\n      isLoading: false\n    }\n  },\n  mixins: [\n    Shopware.Mixin.getByName('notification')\n  ],\n  methods: {\n    handleErrorOnApi(errorResponse) {\n      try {\n        const message = errorResponse.response?.data?.error ?? this.$tc('satispay-config.notification.error');\n        this.createNotificationError({\n          title: this.$tc('global.default.error'),\n          message: message,\n          autoClose: false\n        });\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    handleApiResponse() {\n      try {\n        this.createNotificationSuccess({\n          title: this.$tc('global.default.success'),\n          message: this.$tc('satispay-config.notification.success')\n        });\n      } finally {\n        this.isLoading = false;\n        window.location.reload();\n      }\n    },\n    onActivateClickedButton() {\n      this.isLoading = true;\n      this.SatispayConfigApiService.activate()\n          .then(this.handleApiResponse)\n          .catch(this.handleErrorOnApi);\n    }\n  }\n}\n</script>","import template from './satispay-config-check-button.vue';\n\nShopware.Component.register('satispay-config-check-button', template);\n","{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    <sw-tabs-item\n        v-if=\"isSatispayPayment\"\n        :route=\"{ name: 'satispay.payment.detail', params: { id: $route.params.id } }\"\n        :title=\"$tc('satispay-payments.order-detail.tabTitle')\">\n        {{ $tc('satispay-payments.order-detail.tabTitle') }}\n    </sw-tabs-item>\n{% endblock %}\n","import template from './sw-order-detail.html.twig';\n\nconst { Component, Context } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\n\nComponent.override('sw-order-detail', {\n    template,\n\n    inject: [\n        'repositoryFactory'\n    ],\n\n    data() {\n        return {\n            isSatispayPayment: false\n        };\n    },\n\n    created() {\n        this.initializeSatispay();\n    },\n\n    methods: {\n        initializeSatispay() {\n            const orderId = this.orderId;\n            // noinspection JSUnresolvedVariable\n            const orderRepository = this.repositoryFactory.create('order');\n            const orderCriteria = new Criteria(1, 1);\n            orderCriteria.getAssociation('transactions').addSorting(Criteria.sort('createdAt'));\n            orderRepository.get(orderId, Context.api, orderCriteria).then((order) => {\n                const lastTransactionIndex = order.transactions.length - 1;\n\n                if (order.transactions[lastTransactionIndex].customFields === null ||\n                    typeof order.transactions[lastTransactionIndex].customFields.satispay_payment_id === 'undefined') {\n                    this.isSatispayPayment = false;\n                    return;\n                }\n                this.isSatispayPayment = true;\n            });\n        }\n    }\n});\n\n"],"names":["ApiService","SatispayConfigApiService","httpClient","loginService","apiEndpoint","apiRoute","response","SatispayPaymentService","orderId","paymentId","refundAmount","container","initContainer","template$5","Component","Mixin","template","errorResponse","message","template$4","template$3","template$2","lastTransactionIndex","satispayTransactionId","canRefund","Context","Criteria","orderRepository","orderCriteria","order","payment","Module","enGB","deDE","itIT","next","currentRoute","_a","vue","_sfc_main","_b","_createBlock","_component_mt_button","$options","$data","_withCtx","_createTextVNode","_toDisplayString","_ctx"],"mappings":"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","x_google_ignoreList":[12]}