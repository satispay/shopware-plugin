const p=Shopware.Classes.ApiService;class y extends p{constructor(e,a,i="satispay"){super(e,a,i)}activate(){const e=`_action/${this.getApiBasePath()}/activate`;return this.httpClient.get(e,{headers:this.getBasicHeaders()}).then(a=>p.handleResponse(a))}}const c=Shopware.Classes.ApiService;class h extends c{constructor(e,a,i="satispay"){super(e,a,i)}getPaymentDetails(e,a){const i=`_action/${this.getApiBasePath()}/payment-details/${e}/${a}`;return this.httpClient.get(i,{headers:this.getBasicHeaders()}).then(s=>c.handleResponse(s))}refundPayment(e,a,i){const s=`_action/${this.getApiBasePath()}/refund-payment/${e}/${a}`;return this.httpClient.post(s,{refundAmount:i},{headers:this.getBasicHeaders()}).then(o=>c.handleResponse(o))}}Shopware.Application.addServiceProvider("SatispayConfigApiService",t=>{const e=Shopware.Application.getContainer("init");return new y(e.httpClient,t.loginService)});Shopware.Application.addServiceProvider("SatispayPaymentService",t=>{const e=Shopware.Application.getContainer("init");return new h(e.httpClient,t.loginService)});const f='{% block sw_plugin_config_actions_save %} {% parent %} {% block satispay_plugin_config_actions_activate %} {% endblock %} {% endblock %} {% block sw_plugin_config_content %} {% parent %} <sw-loader v-if="isLoading"></sw-loader> {% endblock %}',{Component:g,Mixin:v}=Shopware;g.override("sw-plugin-config",{template:f,inject:["SatispayConfigApiService"],mixins:[v.getByName("notification")],data(){return{isLoading:!1}},methods:{handleErrorOnApi(t){try{const e=t.response.data.error!==void 0?t.response.data.error:this.$tc("satispay-config.notification.error");this.createNotificationError({title:this.$tc("global.default.error"),message:e,autoClose:!1})}finally{this.isLoading=!1}},handleApiResponse(){try{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("satispay-config.notification.success")})}finally{this.isLoading=!1,window.location.reload()}},onActivateClickedButton(){this.isLoading=!0,this.SatispayConfigApiService.activate().then(this.handleApiResponse).catch(this.handleErrorOnApi)}}});const b=`{% block satispay_payment_detail %} <div class="satispay-payment-detail"> <div v-if="!isLoading && showPaymentDetails"> <sw-card :title="$tc('satispay-payments.paymentDetails.title')"> <template #grid> {% block satispay_payment_actions_section %} <sw-card-section secondary slim> <satispay-payment-actions :order="order" :paymentResource="paymentTransactionData"> </satispay-payment-actions> </sw-card-section> {% endblock %} <sw-card-section divider="top"> <sw-container columns="1fr" gap="0px 30px"> <h3> {{ $tc('satispay-payments.paymentDetails.status.heading') }} </h3> {% block satispay_payment_detail %} <sw-description-list> <dt>{{ $tc('satispay-payments.paymentDetails.description.status') }}</dt> <dd>{{ status }}</dd> <dt>{{ $tc('satispay-payments.paymentDetails.description.amount') }}</dt> <dd>{{ amount }}</dd> <dt>{{ $tc('satispay-payments.paymentDetails.description.currency') }}</dt> <dd>{{ currency }}</dd> <dt>{{ $tc('satispay-payments.paymentDetails.description.flow') }}</dt> <dd>{{ flow }}</dd> <dt>{{ $tc('satispay-payments.paymentDetails.description.type') }}</dt> <dd>{{ type }}</dd> </sw-description-list> {% endblock %} </sw-container> </sw-card-section> </template> </sw-card> </div> <div v-if="showError"> <sw-empty-state :title="$tc('satispay-payments.paymentDetails.errorPage.title')" :subline="$tc('satispay-payments.paymentDetails.errorPage.subline')" icon="default-shopping-paper-bag" color="#A092F0"> </sw-empty-state> </div> <sw-loader v-if="isLoading"></sw-loader> </div> {% endblock %}`,w=`{% block satispay_payment_actions %} <div> <div class="satispay-payment-actions__button-container"> <div class="satispay-payment-actions__authorize-button-group"> {% block satispay_payment_actions_refund %} <sw-button variant="primary" size="small" :disabled="notRefundable" @click="showModal = true"> {{ $tc('satispay-payments.paymentDetails.buttons.label.refund') }} </sw-button> {% endblock %} </div> {% block satispay_payment_actions_modal %} {% block satispay_payment_actions_modal_refund %} <satispay-payment-action-refund v-if="showModal" @modal-close="showModal=false" :order="order" :paymentResource="paymentResource"> </satispay-payment-action-refund> {% endblock %} {% endblock %} </div> </div> {% endblock %}`,S=`{% block satispay_payment_actions_modal_refund %} <sw-modal variant="small" :title="$tc(\`satispay-payments.paymentDetails.modal.refund.title\`)" @modal-close="$emit('modal-close')"> <sw-number-field v-model:value="refundAmount" :max="refundableAmount" :min="0" :label="$tc('satispay-payments.paymentDetails.modal.refund.amount.label')" :helpText="$tc('satispay-payments.paymentDetails.modal.refund.amount.helpText')"> <template #suffix> {{ paymentResource.currency }} </template> </sw-number-field> <span style="font-size: 10px;"> {{ $tc('satispay-payments.paymentDetails.modal.refund.amount.helpTextEmpty') }} <br /> {{ $tc('satispay-payments.paymentDetails.modal.refund.amount.helpTextDecimals') }} </span> <template #modal-footer> <mt-button variant="primary" @click="refund"> {{ $tc('satispay-payments.paymentDetails.modal.refund.confirmButton') }} </mt-button> </template> </sw-modal> {% endblock %}`,{Component:_,Mixin:A}=Shopware;_.register("satispay-payment-action-refund",{template:S,inject:["SatispayPaymentService"],mixins:[A.getByName("notification")],props:{paymentResource:{type:Object,required:!0},order:{type:Object,required:!0}},data(){return{refundableAmount:0,refundAmount:0,isLoading:!1}},created(){this.paymentResource&&(this.refundableAmount=this.paymentResource.amount_unit/100)},methods:{handleErrorOnApi(t){try{const e=t.response.data.error!==void 0?t.response.data.error:this.$tc("satispay-payments.paymentDetails.modal.notification.error");this.createNotificationError({title:this.$tc("satispay-payments.paymentDetails.errorPage.title"),message:e,autoClose:!1})}finally{this.isLoading=!1,this.showPaymentDetails=!1,this.$emit("modal-close")}},handleApiResponse(){try{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("satispay-payments.paymentDetails.modal.notification.success")})}finally{this.isLoading=!1,this.showPaymentDetails=!0,this.$emit("modal-close")}},refund(){this.isLoading=!0;const t=this.order.transactions.length-1,e=this.order.transactions[t].customFields.satispay_payment_id,a=this.refundAmount===0?this.refundableAmount:this.refundAmount;this.SatispayPaymentService.refundPayment(this.order.id,e,a).then(this.handleApiResponse).catch(this.handleErrorOnApi)}}});const{Component:$}=Shopware;$.register("satispay-payment-actions",{template:w,inject:["repositoryFactory"],data(){return{showModal:!1}},props:{paymentResource:{type:Object,required:!0}},computed:{order(){return Shopware.Store.get("swOrderDetail").order},orderTransaction(){const t=this.order.transactions.length-1;return this.order.transactions[t]},isStateRefundable(){return["paid","paid_partially","refunded"].indexOf(this.orderTransaction.stateMachineState.technicalName)>-1},notRefundable(){const t=this.isStateRefundable;return this.paymentResource.amount_unit<=0||this.paymentResource.status!="ACCEPTED"||!t}},watch:{order:{immediate:!0}}});const{Component:D,Mixin:C,Context:k}=Shopware,d=Shopware.Data.Criteria;D.register("satispay-payment-detail",{template:b,inject:["SatispayPaymentService","repositoryFactory"],mixins:[C.getByName("notification")],data(){return{isLoading:!0,showPaymentDetails:!1,order:null,satispayTransactionId:null,paymentTransactionData:null,currency:null,status:null,flow:null,type:null}},computed:{showError(){return this.isLoading===!1&&this.showPaymentDetails===!1},amount(){return this.paymentTransactionData?this.paymentTransactionData.amount_unit/100:0}},created(){this.createdComponent()},methods:{handleErrorOnApi(t){try{this.createNotificationError({title:this.$tc("satispay-payments.paymentDetails.errorPage.title"),message:t.response.data.errors[0].detail,autoClose:!1})}finally{this.isLoading=!1,this.showPaymentDetails=!1}},createdComponent(){const t=this.$route.params.id,e=this.repositoryFactory.create("order"),a=new d(1,1);a.getAssociation("transactions").addSorting(d.sort("createdAt")),e.get(t,k.api,a).then(i=>{this.order=i;const s=i.transactions.length-1;if(i.transactions[s].customFields===null||typeof i.transactions[s].customFields.satispay_payment_id>"u"){this.isLoading=!1,this.showPaymentDetails=!1;return}const o=i.transactions[s].customFields.satispay_payment_id;this.showPaymentDetails=!0,this.SatispayPaymentService.getPaymentDetails(this.order.id,o).then(r=>{this.paymentTransactionData=r,this.status=this.paymentTransactionData.status,this.currency=this.paymentTransactionData.currency,this.flow=this.paymentTransactionData.flow,this.type=this.paymentTransactionData.type,this.isLoading=!1}).catch(this.handleErrorOnApi)}).catch(this.handleErrorOnApi)}}});const x={"satispay-payments":{general:{mainMenuItemGeneral:"Satispay",descriptionTextModule:"Save time and money by accepting payments from your customers with Satispay. Free, simple, secure! #doitsmart"},paymentDetails:{title:"Payment details",buttons:{label:{refund:"Make a refund"}},status:{heading:"Payment"},errorPage:{title:"Error",subline:"An error occurred while retrieving the payment details."},description:{status:"Status",amount:"Amount",currency:"Currency",type:"Type",flow:"Flow"},modal:{refund:{title:"Refund",amount:{label:"Amount",helpText:"Amount to refund for the current order.",helpTextEmpty:"Leave empty to refund the total amount.",helpTextDecimals:"Decimals must be divided with a dot."},confirmButton:"Perform refund"},notification:{success:"Refund approved",error:"An error occurred. Please retry or contact your support."}}}},"satispay-config":{activateButton:"Activate",notification:{success:"Activation processed",error:"An error occurred. Please retry or contact your support."}}},P={"satispay-payments":{general:{mainMenuItemGeneral:"Satispay",descriptionTextModule:"Spare Zeit und Geld, indem du Zahlungen von deinen Kunden mit Satispay akzeptierst. Kostenlos, einfach, sicher! #doitsmart"},paymentDetails:{title:"Zahlungsdetails",buttons:{label:{refund:"Eine Rückerstattung machen"}},status:{heading:"Zahlung"},errorPage:{title:"Fehler",subline:"Beim Abrufen der Zahlungsdetails ist ein Fehler aufgetreten."},description:{status:"Status",amount:"Betrag",currency:"Währung",type:"Art",flow:"Fluss"},modal:{refund:{title:"Rückerstattung",amount:{label:"Betrag",helpText:"Zu erstattender Betrag für die aktuelle Bestellung.",helpTextEmpty:"Leer lassen, um den Gesamtbetrag zu erstatten.",helpTextDecimals:"Die Dezimalstellen müssen mit dem Punkt dividiert werden."},confirmButton:"Eine Rückerstattung machen"},notification:{success:"Rückerstattung ausgeführt",error:"Es ist ein Fehler aufgetreten. Bitte versuche es erneut oder kontaktiere deinen Support."}}}},"satispay-config":{activateButton:"Aktivieren",notification:{success:"Aktivierung abgeschlossen",error:"Es ist ein Fehler aufgetreten. Bitte versuche es erneut oder kontaktiere deinen Support."}}},T={"satispay-payments":{general:{mainMenuItemGeneral:"Satispay",descriptionTextModule:"Risparmia tempo e denaro ricevendo pagamenti dai tuoi clienti con Satispay. Gratuita, semplice, sicura. #doitsmart"},paymentDetails:{title:"Dettagli pagamento",buttons:{label:{refund:"Effettua un rimborso"}},status:{heading:"Pagamento"},errorPage:{title:"Errore",subline:"Si è verificato un errore durante il recupero dei dettagli di pagamento."},description:{status:"Stato",amount:"Importo",currency:"Valuta",type:"Tipologia",flow:"Flusso"},modal:{refund:{title:"Rimborso",amount:{label:"Importo",helpText:"Importo da rimborsare per l'ordine corrente.",helpTextEmpty:"Lasciare vuoto per rimborsare l'intero importo.",helpTextDecimals:"I decimali vanno divisi con il punto."},confirmButton:"Effettua rimborso"},notification:{success:"Rimborso eseguito",error:"Si è verificato un errore. Riprova o contatta il supporto."}}}},"satispay-config":{activateButton:"Attiva",notification:{success:"Attivazione effettuata",error:"Si è verificato un errore. Riprova o contatta il supporto."}}},{Module:R}=Shopware;R.register("satispay-payment",{type:"plugin",name:"SatispayPayments",title:"satispay-payments.general.mainMenuItemGeneral",description:"satispay-payments.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#333",icon:"default-action-settings",snippets:{"en-GB":x,"de-DE":P,"it-IT":T},routeMiddleware(t,e){e.name==="sw.order.detail"&&e.children.push({component:"satispay-payment-detail",name:"satispay.payment.detail",isChildren:!0,path:"/sw/order/satispay/detail/:id",meta:{parentPath:"sw.order.index"}}),t(e)}});var l,u;function B(){var t;return u||(u=1,l=(t=window.Shopware)==null?void 0:t.Vue),l}var n=B();const E=(t,e)=>{const a=t.__vccOpts||t;for(const[i,s]of e)a[i]=s;return a},L={inject:["SatispayConfigApiService"],data(){return{isLoading:!1}},mixins:[Shopware.Mixin.getByName("notification")],methods:{handleErrorOnApi(t){var e,a;try{const i=((a=(e=t.response)==null?void 0:e.data)==null?void 0:a.error)??this.$tc("satispay-config.notification.error");this.createNotificationError({title:this.$tc("global.default.error"),message:i,autoClose:!1})}finally{this.isLoading=!1}},handleApiResponse(){try{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("satispay-config.notification.success")})}finally{this.isLoading=!1,window.location.reload()}},onActivateClickedButton(){this.isLoading=!0,this.SatispayConfigApiService.activate().then(this.handleApiResponse).catch(this.handleErrorOnApi)}}};function M(t,e,a,i,s,o){const r=n.resolveComponent("mt-button");return n.openBlock(),n.createBlock(r,{class:"sw-plugin-config__activate-action",onClick:o.onActivateClickedButton,onDisabled:s.isLoading},{default:n.withCtx(()=>[n.createTextVNode(n.toDisplayString(t.$tc("satispay-config.activateButton")),1)],void 0,!0),_:1},8,["onClick","onDisabled"])}const F=E(L,[["render",M]]);Shopware.Component.register("satispay-config-check-button",F);const I=`{% block sw_order_detail_content_tabs_general %} {% parent %} <sw-tabs-item v-if="isSatispayPayment" :route="{ name: 'satispay.payment.detail', params: { id: $route.params.id } }" :title="$tc('satispay-payments.order-detail.tabTitle')"> {{ $tc('satispay-payments.order-detail.tabTitle') }} </sw-tabs-item> {% endblock %}`,{Component:O,Context:N}=Shopware,m=Shopware.Data.Criteria;O.override("sw-order-detail",{template:I,inject:["repositoryFactory"],data(){return{isSatispayPayment:!1}},created(){this.initializeSatispay()},methods:{initializeSatispay(){const t=this.orderId,e=this.repositoryFactory.create("order"),a=new m(1,1);a.getAssociation("transactions").addSorting(m.sort("createdAt")),e.get(t,N.api,a).then(i=>{const s=i.transactions.length-1;if(i.transactions[s].customFields===null||typeof i.transactions[s].customFields.satispay_payment_id>"u"){this.isSatispayPayment=!1;return}this.isSatispayPayment=!0})}}});
//# sourceMappingURL=satispay-6tHuB-xN.js.map
